# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _persis_homo_optimal
else:
    import _persis_homo_optimal

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _persis_homo_optimal.delete_SwigPyIterator

    def value(self):
        return _persis_homo_optimal.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _persis_homo_optimal.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _persis_homo_optimal.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _persis_homo_optimal.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _persis_homo_optimal.SwigPyIterator_equal(self, x)

    def copy(self):
        return _persis_homo_optimal.SwigPyIterator_copy(self)

    def next(self):
        return _persis_homo_optimal.SwigPyIterator_next(self)

    def __next__(self):
        return _persis_homo_optimal.SwigPyIterator___next__(self)

    def previous(self):
        return _persis_homo_optimal.SwigPyIterator_previous(self)

    def advance(self, n):
        return _persis_homo_optimal.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _persis_homo_optimal.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _persis_homo_optimal.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _persis_homo_optimal.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _persis_homo_optimal.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _persis_homo_optimal.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _persis_homo_optimal.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _persis_homo_optimal:
_persis_homo_optimal.SwigPyIterator_swigregister(SwigPyIterator)

class cpp_nested1_IntVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _persis_homo_optimal.cpp_nested1_IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _persis_homo_optimal.cpp_nested1_IntVector___nonzero__(self)

    def __bool__(self):
        return _persis_homo_optimal.cpp_nested1_IntVector___bool__(self)

    def __len__(self):
        return _persis_homo_optimal.cpp_nested1_IntVector___len__(self)

    def __getslice__(self, i, j):
        return _persis_homo_optimal.cpp_nested1_IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _persis_homo_optimal.cpp_nested1_IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _persis_homo_optimal.cpp_nested1_IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _persis_homo_optimal.cpp_nested1_IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _persis_homo_optimal.cpp_nested1_IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _persis_homo_optimal.cpp_nested1_IntVector___setitem__(self, *args)

    def pop(self):
        return _persis_homo_optimal.cpp_nested1_IntVector_pop(self)

    def append(self, x):
        return _persis_homo_optimal.cpp_nested1_IntVector_append(self, x)

    def empty(self):
        return _persis_homo_optimal.cpp_nested1_IntVector_empty(self)

    def size(self):
        return _persis_homo_optimal.cpp_nested1_IntVector_size(self)

    def swap(self, v):
        return _persis_homo_optimal.cpp_nested1_IntVector_swap(self, v)

    def begin(self):
        return _persis_homo_optimal.cpp_nested1_IntVector_begin(self)

    def end(self):
        return _persis_homo_optimal.cpp_nested1_IntVector_end(self)

    def rbegin(self):
        return _persis_homo_optimal.cpp_nested1_IntVector_rbegin(self)

    def rend(self):
        return _persis_homo_optimal.cpp_nested1_IntVector_rend(self)

    def clear(self):
        return _persis_homo_optimal.cpp_nested1_IntVector_clear(self)

    def get_allocator(self):
        return _persis_homo_optimal.cpp_nested1_IntVector_get_allocator(self)

    def pop_back(self):
        return _persis_homo_optimal.cpp_nested1_IntVector_pop_back(self)

    def erase(self, *args):
        return _persis_homo_optimal.cpp_nested1_IntVector_erase(self, *args)

    def __init__(self, *args):
        _persis_homo_optimal.cpp_nested1_IntVector_swiginit(self, _persis_homo_optimal.new_cpp_nested1_IntVector(*args))

    def push_back(self, x):
        return _persis_homo_optimal.cpp_nested1_IntVector_push_back(self, x)

    def front(self):
        return _persis_homo_optimal.cpp_nested1_IntVector_front(self)

    def back(self):
        return _persis_homo_optimal.cpp_nested1_IntVector_back(self)

    def assign(self, n, x):
        return _persis_homo_optimal.cpp_nested1_IntVector_assign(self, n, x)

    def resize(self, *args):
        return _persis_homo_optimal.cpp_nested1_IntVector_resize(self, *args)

    def insert(self, *args):
        return _persis_homo_optimal.cpp_nested1_IntVector_insert(self, *args)

    def reserve(self, n):
        return _persis_homo_optimal.cpp_nested1_IntVector_reserve(self, n)

    def capacity(self):
        return _persis_homo_optimal.cpp_nested1_IntVector_capacity(self)
    __swig_destroy__ = _persis_homo_optimal.delete_cpp_nested1_IntVector

# Register cpp_nested1_IntVector in _persis_homo_optimal:
_persis_homo_optimal.cpp_nested1_IntVector_swigregister(cpp_nested1_IntVector)

class cpp_nested2_InvVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _persis_homo_optimal.cpp_nested2_InvVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _persis_homo_optimal.cpp_nested2_InvVector___nonzero__(self)

    def __bool__(self):
        return _persis_homo_optimal.cpp_nested2_InvVector___bool__(self)

    def __len__(self):
        return _persis_homo_optimal.cpp_nested2_InvVector___len__(self)

    def __getslice__(self, i, j):
        return _persis_homo_optimal.cpp_nested2_InvVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _persis_homo_optimal.cpp_nested2_InvVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _persis_homo_optimal.cpp_nested2_InvVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _persis_homo_optimal.cpp_nested2_InvVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _persis_homo_optimal.cpp_nested2_InvVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _persis_homo_optimal.cpp_nested2_InvVector___setitem__(self, *args)

    def pop(self):
        return _persis_homo_optimal.cpp_nested2_InvVector_pop(self)

    def append(self, x):
        return _persis_homo_optimal.cpp_nested2_InvVector_append(self, x)

    def empty(self):
        return _persis_homo_optimal.cpp_nested2_InvVector_empty(self)

    def size(self):
        return _persis_homo_optimal.cpp_nested2_InvVector_size(self)

    def swap(self, v):
        return _persis_homo_optimal.cpp_nested2_InvVector_swap(self, v)

    def begin(self):
        return _persis_homo_optimal.cpp_nested2_InvVector_begin(self)

    def end(self):
        return _persis_homo_optimal.cpp_nested2_InvVector_end(self)

    def rbegin(self):
        return _persis_homo_optimal.cpp_nested2_InvVector_rbegin(self)

    def rend(self):
        return _persis_homo_optimal.cpp_nested2_InvVector_rend(self)

    def clear(self):
        return _persis_homo_optimal.cpp_nested2_InvVector_clear(self)

    def get_allocator(self):
        return _persis_homo_optimal.cpp_nested2_InvVector_get_allocator(self)

    def pop_back(self):
        return _persis_homo_optimal.cpp_nested2_InvVector_pop_back(self)

    def erase(self, *args):
        return _persis_homo_optimal.cpp_nested2_InvVector_erase(self, *args)

    def __init__(self, *args):
        _persis_homo_optimal.cpp_nested2_InvVector_swiginit(self, _persis_homo_optimal.new_cpp_nested2_InvVector(*args))

    def push_back(self, x):
        return _persis_homo_optimal.cpp_nested2_InvVector_push_back(self, x)

    def front(self):
        return _persis_homo_optimal.cpp_nested2_InvVector_front(self)

    def back(self):
        return _persis_homo_optimal.cpp_nested2_InvVector_back(self)

    def assign(self, n, x):
        return _persis_homo_optimal.cpp_nested2_InvVector_assign(self, n, x)

    def resize(self, *args):
        return _persis_homo_optimal.cpp_nested2_InvVector_resize(self, *args)

    def insert(self, *args):
        return _persis_homo_optimal.cpp_nested2_InvVector_insert(self, *args)

    def reserve(self, n):
        return _persis_homo_optimal.cpp_nested2_InvVector_reserve(self, n)

    def capacity(self):
        return _persis_homo_optimal.cpp_nested2_InvVector_capacity(self)
    __swig_destroy__ = _persis_homo_optimal.delete_cpp_nested2_InvVector

# Register cpp_nested2_InvVector in _persis_homo_optimal:
_persis_homo_optimal.cpp_nested2_InvVector_swigregister(cpp_nested2_InvVector)

class cpp_nested3_IntVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _persis_homo_optimal.cpp_nested3_IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _persis_homo_optimal.cpp_nested3_IntVector___nonzero__(self)

    def __bool__(self):
        return _persis_homo_optimal.cpp_nested3_IntVector___bool__(self)

    def __len__(self):
        return _persis_homo_optimal.cpp_nested3_IntVector___len__(self)

    def __getslice__(self, i, j):
        return _persis_homo_optimal.cpp_nested3_IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _persis_homo_optimal.cpp_nested3_IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _persis_homo_optimal.cpp_nested3_IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _persis_homo_optimal.cpp_nested3_IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _persis_homo_optimal.cpp_nested3_IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _persis_homo_optimal.cpp_nested3_IntVector___setitem__(self, *args)

    def pop(self):
        return _persis_homo_optimal.cpp_nested3_IntVector_pop(self)

    def append(self, x):
        return _persis_homo_optimal.cpp_nested3_IntVector_append(self, x)

    def empty(self):
        return _persis_homo_optimal.cpp_nested3_IntVector_empty(self)

    def size(self):
        return _persis_homo_optimal.cpp_nested3_IntVector_size(self)

    def swap(self, v):
        return _persis_homo_optimal.cpp_nested3_IntVector_swap(self, v)

    def begin(self):
        return _persis_homo_optimal.cpp_nested3_IntVector_begin(self)

    def end(self):
        return _persis_homo_optimal.cpp_nested3_IntVector_end(self)

    def rbegin(self):
        return _persis_homo_optimal.cpp_nested3_IntVector_rbegin(self)

    def rend(self):
        return _persis_homo_optimal.cpp_nested3_IntVector_rend(self)

    def clear(self):
        return _persis_homo_optimal.cpp_nested3_IntVector_clear(self)

    def get_allocator(self):
        return _persis_homo_optimal.cpp_nested3_IntVector_get_allocator(self)

    def pop_back(self):
        return _persis_homo_optimal.cpp_nested3_IntVector_pop_back(self)

    def erase(self, *args):
        return _persis_homo_optimal.cpp_nested3_IntVector_erase(self, *args)

    def __init__(self, *args):
        _persis_homo_optimal.cpp_nested3_IntVector_swiginit(self, _persis_homo_optimal.new_cpp_nested3_IntVector(*args))

    def push_back(self, x):
        return _persis_homo_optimal.cpp_nested3_IntVector_push_back(self, x)

    def front(self):
        return _persis_homo_optimal.cpp_nested3_IntVector_front(self)

    def back(self):
        return _persis_homo_optimal.cpp_nested3_IntVector_back(self)

    def assign(self, n, x):
        return _persis_homo_optimal.cpp_nested3_IntVector_assign(self, n, x)

    def resize(self, *args):
        return _persis_homo_optimal.cpp_nested3_IntVector_resize(self, *args)

    def insert(self, *args):
        return _persis_homo_optimal.cpp_nested3_IntVector_insert(self, *args)

    def reserve(self, n):
        return _persis_homo_optimal.cpp_nested3_IntVector_reserve(self, n)

    def capacity(self):
        return _persis_homo_optimal.cpp_nested3_IntVector_capacity(self)
    __swig_destroy__ = _persis_homo_optimal.delete_cpp_nested3_IntVector

# Register cpp_nested3_IntVector in _persis_homo_optimal:
_persis_homo_optimal.cpp_nested3_IntVector_swigregister(cpp_nested3_IntVector)

class cpp_nested4_IntVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _persis_homo_optimal.cpp_nested4_IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _persis_homo_optimal.cpp_nested4_IntVector___nonzero__(self)

    def __bool__(self):
        return _persis_homo_optimal.cpp_nested4_IntVector___bool__(self)

    def __len__(self):
        return _persis_homo_optimal.cpp_nested4_IntVector___len__(self)

    def __getslice__(self, i, j):
        return _persis_homo_optimal.cpp_nested4_IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _persis_homo_optimal.cpp_nested4_IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _persis_homo_optimal.cpp_nested4_IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _persis_homo_optimal.cpp_nested4_IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _persis_homo_optimal.cpp_nested4_IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _persis_homo_optimal.cpp_nested4_IntVector___setitem__(self, *args)

    def pop(self):
        return _persis_homo_optimal.cpp_nested4_IntVector_pop(self)

    def append(self, x):
        return _persis_homo_optimal.cpp_nested4_IntVector_append(self, x)

    def empty(self):
        return _persis_homo_optimal.cpp_nested4_IntVector_empty(self)

    def size(self):
        return _persis_homo_optimal.cpp_nested4_IntVector_size(self)

    def swap(self, v):
        return _persis_homo_optimal.cpp_nested4_IntVector_swap(self, v)

    def begin(self):
        return _persis_homo_optimal.cpp_nested4_IntVector_begin(self)

    def end(self):
        return _persis_homo_optimal.cpp_nested4_IntVector_end(self)

    def rbegin(self):
        return _persis_homo_optimal.cpp_nested4_IntVector_rbegin(self)

    def rend(self):
        return _persis_homo_optimal.cpp_nested4_IntVector_rend(self)

    def clear(self):
        return _persis_homo_optimal.cpp_nested4_IntVector_clear(self)

    def get_allocator(self):
        return _persis_homo_optimal.cpp_nested4_IntVector_get_allocator(self)

    def pop_back(self):
        return _persis_homo_optimal.cpp_nested4_IntVector_pop_back(self)

    def erase(self, *args):
        return _persis_homo_optimal.cpp_nested4_IntVector_erase(self, *args)

    def __init__(self, *args):
        _persis_homo_optimal.cpp_nested4_IntVector_swiginit(self, _persis_homo_optimal.new_cpp_nested4_IntVector(*args))

    def push_back(self, x):
        return _persis_homo_optimal.cpp_nested4_IntVector_push_back(self, x)

    def front(self):
        return _persis_homo_optimal.cpp_nested4_IntVector_front(self)

    def back(self):
        return _persis_homo_optimal.cpp_nested4_IntVector_back(self)

    def assign(self, n, x):
        return _persis_homo_optimal.cpp_nested4_IntVector_assign(self, n, x)

    def resize(self, *args):
        return _persis_homo_optimal.cpp_nested4_IntVector_resize(self, *args)

    def insert(self, *args):
        return _persis_homo_optimal.cpp_nested4_IntVector_insert(self, *args)

    def reserve(self, n):
        return _persis_homo_optimal.cpp_nested4_IntVector_reserve(self, n)

    def capacity(self):
        return _persis_homo_optimal.cpp_nested4_IntVector_capacity(self)
    __swig_destroy__ = _persis_homo_optimal.delete_cpp_nested4_IntVector

# Register cpp_nested4_IntVector in _persis_homo_optimal:
_persis_homo_optimal.cpp_nested4_IntVector_swigregister(cpp_nested4_IntVector)

class cpp_nested1_DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _persis_homo_optimal.cpp_nested1_DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _persis_homo_optimal.cpp_nested1_DoubleVector___nonzero__(self)

    def __bool__(self):
        return _persis_homo_optimal.cpp_nested1_DoubleVector___bool__(self)

    def __len__(self):
        return _persis_homo_optimal.cpp_nested1_DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _persis_homo_optimal.cpp_nested1_DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _persis_homo_optimal.cpp_nested1_DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _persis_homo_optimal.cpp_nested1_DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _persis_homo_optimal.cpp_nested1_DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _persis_homo_optimal.cpp_nested1_DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _persis_homo_optimal.cpp_nested1_DoubleVector___setitem__(self, *args)

    def pop(self):
        return _persis_homo_optimal.cpp_nested1_DoubleVector_pop(self)

    def append(self, x):
        return _persis_homo_optimal.cpp_nested1_DoubleVector_append(self, x)

    def empty(self):
        return _persis_homo_optimal.cpp_nested1_DoubleVector_empty(self)

    def size(self):
        return _persis_homo_optimal.cpp_nested1_DoubleVector_size(self)

    def swap(self, v):
        return _persis_homo_optimal.cpp_nested1_DoubleVector_swap(self, v)

    def begin(self):
        return _persis_homo_optimal.cpp_nested1_DoubleVector_begin(self)

    def end(self):
        return _persis_homo_optimal.cpp_nested1_DoubleVector_end(self)

    def rbegin(self):
        return _persis_homo_optimal.cpp_nested1_DoubleVector_rbegin(self)

    def rend(self):
        return _persis_homo_optimal.cpp_nested1_DoubleVector_rend(self)

    def clear(self):
        return _persis_homo_optimal.cpp_nested1_DoubleVector_clear(self)

    def get_allocator(self):
        return _persis_homo_optimal.cpp_nested1_DoubleVector_get_allocator(self)

    def pop_back(self):
        return _persis_homo_optimal.cpp_nested1_DoubleVector_pop_back(self)

    def erase(self, *args):
        return _persis_homo_optimal.cpp_nested1_DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _persis_homo_optimal.cpp_nested1_DoubleVector_swiginit(self, _persis_homo_optimal.new_cpp_nested1_DoubleVector(*args))

    def push_back(self, x):
        return _persis_homo_optimal.cpp_nested1_DoubleVector_push_back(self, x)

    def front(self):
        return _persis_homo_optimal.cpp_nested1_DoubleVector_front(self)

    def back(self):
        return _persis_homo_optimal.cpp_nested1_DoubleVector_back(self)

    def assign(self, n, x):
        return _persis_homo_optimal.cpp_nested1_DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _persis_homo_optimal.cpp_nested1_DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _persis_homo_optimal.cpp_nested1_DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _persis_homo_optimal.cpp_nested1_DoubleVector_reserve(self, n)

    def capacity(self):
        return _persis_homo_optimal.cpp_nested1_DoubleVector_capacity(self)
    __swig_destroy__ = _persis_homo_optimal.delete_cpp_nested1_DoubleVector

# Register cpp_nested1_DoubleVector in _persis_homo_optimal:
_persis_homo_optimal.cpp_nested1_DoubleVector_swigregister(cpp_nested1_DoubleVector)

class cpp_nested2_DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _persis_homo_optimal.cpp_nested2_DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _persis_homo_optimal.cpp_nested2_DoubleVector___nonzero__(self)

    def __bool__(self):
        return _persis_homo_optimal.cpp_nested2_DoubleVector___bool__(self)

    def __len__(self):
        return _persis_homo_optimal.cpp_nested2_DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _persis_homo_optimal.cpp_nested2_DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _persis_homo_optimal.cpp_nested2_DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _persis_homo_optimal.cpp_nested2_DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _persis_homo_optimal.cpp_nested2_DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _persis_homo_optimal.cpp_nested2_DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _persis_homo_optimal.cpp_nested2_DoubleVector___setitem__(self, *args)

    def pop(self):
        return _persis_homo_optimal.cpp_nested2_DoubleVector_pop(self)

    def append(self, x):
        return _persis_homo_optimal.cpp_nested2_DoubleVector_append(self, x)

    def empty(self):
        return _persis_homo_optimal.cpp_nested2_DoubleVector_empty(self)

    def size(self):
        return _persis_homo_optimal.cpp_nested2_DoubleVector_size(self)

    def swap(self, v):
        return _persis_homo_optimal.cpp_nested2_DoubleVector_swap(self, v)

    def begin(self):
        return _persis_homo_optimal.cpp_nested2_DoubleVector_begin(self)

    def end(self):
        return _persis_homo_optimal.cpp_nested2_DoubleVector_end(self)

    def rbegin(self):
        return _persis_homo_optimal.cpp_nested2_DoubleVector_rbegin(self)

    def rend(self):
        return _persis_homo_optimal.cpp_nested2_DoubleVector_rend(self)

    def clear(self):
        return _persis_homo_optimal.cpp_nested2_DoubleVector_clear(self)

    def get_allocator(self):
        return _persis_homo_optimal.cpp_nested2_DoubleVector_get_allocator(self)

    def pop_back(self):
        return _persis_homo_optimal.cpp_nested2_DoubleVector_pop_back(self)

    def erase(self, *args):
        return _persis_homo_optimal.cpp_nested2_DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _persis_homo_optimal.cpp_nested2_DoubleVector_swiginit(self, _persis_homo_optimal.new_cpp_nested2_DoubleVector(*args))

    def push_back(self, x):
        return _persis_homo_optimal.cpp_nested2_DoubleVector_push_back(self, x)

    def front(self):
        return _persis_homo_optimal.cpp_nested2_DoubleVector_front(self)

    def back(self):
        return _persis_homo_optimal.cpp_nested2_DoubleVector_back(self)

    def assign(self, n, x):
        return _persis_homo_optimal.cpp_nested2_DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _persis_homo_optimal.cpp_nested2_DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _persis_homo_optimal.cpp_nested2_DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _persis_homo_optimal.cpp_nested2_DoubleVector_reserve(self, n)

    def capacity(self):
        return _persis_homo_optimal.cpp_nested2_DoubleVector_capacity(self)
    __swig_destroy__ = _persis_homo_optimal.delete_cpp_nested2_DoubleVector

# Register cpp_nested2_DoubleVector in _persis_homo_optimal:
_persis_homo_optimal.cpp_nested2_DoubleVector_swigregister(cpp_nested2_DoubleVector)

class cpp_nested3_DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _persis_homo_optimal.cpp_nested3_DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _persis_homo_optimal.cpp_nested3_DoubleVector___nonzero__(self)

    def __bool__(self):
        return _persis_homo_optimal.cpp_nested3_DoubleVector___bool__(self)

    def __len__(self):
        return _persis_homo_optimal.cpp_nested3_DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _persis_homo_optimal.cpp_nested3_DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _persis_homo_optimal.cpp_nested3_DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _persis_homo_optimal.cpp_nested3_DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _persis_homo_optimal.cpp_nested3_DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _persis_homo_optimal.cpp_nested3_DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _persis_homo_optimal.cpp_nested3_DoubleVector___setitem__(self, *args)

    def pop(self):
        return _persis_homo_optimal.cpp_nested3_DoubleVector_pop(self)

    def append(self, x):
        return _persis_homo_optimal.cpp_nested3_DoubleVector_append(self, x)

    def empty(self):
        return _persis_homo_optimal.cpp_nested3_DoubleVector_empty(self)

    def size(self):
        return _persis_homo_optimal.cpp_nested3_DoubleVector_size(self)

    def swap(self, v):
        return _persis_homo_optimal.cpp_nested3_DoubleVector_swap(self, v)

    def begin(self):
        return _persis_homo_optimal.cpp_nested3_DoubleVector_begin(self)

    def end(self):
        return _persis_homo_optimal.cpp_nested3_DoubleVector_end(self)

    def rbegin(self):
        return _persis_homo_optimal.cpp_nested3_DoubleVector_rbegin(self)

    def rend(self):
        return _persis_homo_optimal.cpp_nested3_DoubleVector_rend(self)

    def clear(self):
        return _persis_homo_optimal.cpp_nested3_DoubleVector_clear(self)

    def get_allocator(self):
        return _persis_homo_optimal.cpp_nested3_DoubleVector_get_allocator(self)

    def pop_back(self):
        return _persis_homo_optimal.cpp_nested3_DoubleVector_pop_back(self)

    def erase(self, *args):
        return _persis_homo_optimal.cpp_nested3_DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _persis_homo_optimal.cpp_nested3_DoubleVector_swiginit(self, _persis_homo_optimal.new_cpp_nested3_DoubleVector(*args))

    def push_back(self, x):
        return _persis_homo_optimal.cpp_nested3_DoubleVector_push_back(self, x)

    def front(self):
        return _persis_homo_optimal.cpp_nested3_DoubleVector_front(self)

    def back(self):
        return _persis_homo_optimal.cpp_nested3_DoubleVector_back(self)

    def assign(self, n, x):
        return _persis_homo_optimal.cpp_nested3_DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _persis_homo_optimal.cpp_nested3_DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _persis_homo_optimal.cpp_nested3_DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _persis_homo_optimal.cpp_nested3_DoubleVector_reserve(self, n)

    def capacity(self):
        return _persis_homo_optimal.cpp_nested3_DoubleVector_capacity(self)
    __swig_destroy__ = _persis_homo_optimal.delete_cpp_nested3_DoubleVector

# Register cpp_nested3_DoubleVector in _persis_homo_optimal:
_persis_homo_optimal.cpp_nested3_DoubleVector_swigregister(cpp_nested3_DoubleVector)

class Persistence_Computer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _persis_homo_optimal.Persistence_Computer_swiginit(self, _persis_homo_optimal.new_Persistence_Computer())
    __swig_destroy__ = _persis_homo_optimal.delete_Persistence_Computer

    def run(self):
        return _persis_homo_optimal.Persistence_Computer_run(self)

    def source_from_file(self, *args):
        return _persis_homo_optimal.Persistence_Computer_source_from_file(self, *args)

    def source_from_mat(self, output_file, t):
        return _persis_homo_optimal.Persistence_Computer_source_from_mat(self, output_file, t)

    def source_from_mat_from_int(self, output_file, t, height, width):
        return _persis_homo_optimal.Persistence_Computer_source_from_mat_from_int(self, output_file, t, height, width)

    def source_from_mat_from_double(self, output_file, t, height, width):
        return _persis_homo_optimal.Persistence_Computer_source_from_mat_from_double(self, output_file, t, height, width)

    def set_output_file(self, t):
        return _persis_homo_optimal.Persistence_Computer_set_output_file(self, t)

    def set_pers_thd(self, t):
        return _persis_homo_optimal.Persistence_Computer_set_pers_thd(self, t)

    def set_algorithm(self, t):
        return _persis_homo_optimal.Persistence_Computer_set_algorithm(self, t)

    def set_max_dim(self, t):
        return _persis_homo_optimal.Persistence_Computer_set_max_dim(self, t)

    def set_num_threads(self, t):
        return _persis_homo_optimal.Persistence_Computer_set_num_threads(self, t)

    def set_verbose(self, t):
        return _persis_homo_optimal.Persistence_Computer_set_verbose(self, t)

    def set_debug(self, *args):
        return _persis_homo_optimal.Persistence_Computer_set_debug(self, *args)

    def write_bnd(self, t):
        return _persis_homo_optimal.Persistence_Computer_write_bnd(self, t)

    def write_red(self, t):
        return _persis_homo_optimal.Persistence_Computer_write_red(self, t)

    def write_pers_V(self, pers_V):
        return _persis_homo_optimal.Persistence_Computer_write_pers_V(self, pers_V)

    def write_pers_BD(self, *args):
        return _persis_homo_optimal.Persistence_Computer_write_pers_BD(self, *args)

    def return_bnd(self, t):
        return _persis_homo_optimal.Persistence_Computer_return_bnd(self, t)

    def return_red(self, t):
        return _persis_homo_optimal.Persistence_Computer_return_red(self, t)

    def return_pers_V(self, t):
        return _persis_homo_optimal.Persistence_Computer_return_pers_V(self, t)

    def return_pers_BD(self, t):
        return _persis_homo_optimal.Persistence_Computer_return_pers_BD(self, t)

    def write_output(self):
        return _persis_homo_optimal.Persistence_Computer_write_output(self)

    def clear(self):
        return _persis_homo_optimal.Persistence_Computer_clear(self)

    @staticmethod
    def debugStart(debug_path):
        return _persis_homo_optimal.Persistence_Computer_debugStart(debug_path)

    @staticmethod
    def debugEnd():
        return _persis_homo_optimal.Persistence_Computer_debugEnd()

# Register Persistence_Computer in _persis_homo_optimal:
_persis_homo_optimal.Persistence_Computer_swigregister(Persistence_Computer)

def Persistence_Computer_debugStart(debug_path):
    return _persis_homo_optimal.Persistence_Computer_debugStart(debug_path)

def Persistence_Computer_debugEnd():
    return _persis_homo_optimal.Persistence_Computer_debugEnd()



